"@author Jonathan Alencar <jonfalencar@gmail.com>"

"**Settings**"
syntax enable "enable syntax processing

colorscheme aperture "set colorscheme

set encoding=utf-8 "display encoding as UTF-8
set fileencoding=utf-8 "save files encoded with UTF-8

set tabstop=4 "number of visual spaces per TAB
set softtabstop=4 "number of spaces in tab when editing
set shiftwidth=4 "auto indenting is 4 spaces

set mouse=a

filetype indent on "load filetype-specific indent files
set number "show line numbers
set showcmd "show command in bottom bar
set cursorline "hilight current line
set wildmenu "visual autocomplete for command menu like zsh
set lazyredraw "redraw only when we need to
set showmatch "hilight matching [{()}]

set ignorecase "ignore search case sensitivity if lowercase
set smartcase "uppercase search sensitive while lowercase isn't
set hlsearch "highlight matches
set incsearch "search as characters are entered

set foldenable "enable folding
set foldlevelstart=10 "open most folds by default
set foldnestmax=10 "10 nested fold max
set foldmethod=indent "fold based on indent level
set colorcolumn=80 "hilight column at 80 characters
set timeoutlen=400 "time in milliseconds that is allotted for key code sequence

"**Commands**"
"open program in hex
" command Hex execute "%!xxd -c19"

"Return to source from hex
" command Src execute "%!xxd -c19 -r"

"**Mappings**"
"space open/closes folds
nmap <space> za

"move vertically by visual line
nmap j gj
nmap k gk

"navigate faster with alt[meta] + (j[up] | k[down])
exec "map \ej <A-j>"
exec "map \ek <A-k>"
nnoremap <A-j> 5gj
nnoremap <A-k> 5gk
xnoremap <A-j> 5gj
xnoremap <A-k> 5gk

"highlight last inserted text
nnoremap gV `[v`]

"leader is comma
let mapleader=","

"jk is escape
inoremap jk <esc>
inoremap Jk <esc>
inoremap jK <esc>
inoremap JK <esc>
xnoremap jk <esc>
xnoremap Jk <esc>
xnoremap jK <esc>
xnoremap JK <esc>
cnoremap jk <esc>
cnoremap Jk <esc>
cnoremap jK <esc>
cnoremap JK <esc>

"toggle  search highlight
nmap <leader>o :set nohlsearch!<CR>

"toggle cursorline highlight
nmap <leader>v :set cursorline!<CR>

"edit vimrc/zshrc and load vimrc bindings
nmap <leader>ev :vsp $MYVIMRC<CR>
nmap <leader>ez :vsp ~/.zshrc<CR>
nmap <leader>sv :source $MYVIMRC<CR>

"quit session
nnoremap <leader>q :q<CR>
"save session
nnoremap <leader>w :w<CR>
"save & quit session
nnoremap <leader>x :x<CR>

" navigate in insert mode
imap <C-k> <up>
imap <C-j> <down>

" move selected lines down one line
xnoremap <C-j> :m'>+<CR>gv=gv
" move selected lines up one line
xnoremap <C-k> :m-2<CR>gv=gv

"split window shortcuts
nnoremap <C-j> <C-w>w
nnoremap <C-k> <C-w>W
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
nnoremap <silent> <leader>= <C-w>=
nnoremap <silent> <leader>j :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <leader>k :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <leader>h :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <leader>l :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

if has("autocmd")
	au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

"=====Vim-Plug====="
call plug#begin('~/.vim/plugged')

Plug 'lifepillar/vim-cheat40' "press '<leader>?' to open up Vim cheat sheet
Plug 'scrooloose/nerdcommenter' "allows for easy commenting with <leader> cc, etc.
Plug 'sheerun/vim-polyglot' "enhanced syntax highlighting for various languages
Plug 'vim-syntastic/syntastic' "enhanced syntax checking for various languages
Plug 'tpope/vim-unimpaired' "shortcuts for error navigation
Plug 'rust-lang/rust.vim' "Rust/Cargo language support
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' } "Go language support
 
call plug#end()

"+++++Nerdcommenter+++++"
"comments out whole lines in visual mode
let NERDCommentWholeLinesInVMode = 1

"removes spaces around comment delimiters when uncommenting
"let NERDRemoveExtraSpace = 1

"add space after comment delimiters by default
let g:NERDSpaceDelims = 1

"align line-wise comment delimiters flush left instead of indenting
let g:NERDDefaultAlign = 'start'

"Set C to use alternate delimieters (//) vs (/* */)
let g:NERDAltDelims_c = 1

"+++++Syntastic+++++"
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_check_on_wq = 0
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_always_populate_loc_list = 1

"Rust & Cargo support
let g:syntastic_rust_checkers = ['rustc', 'cargo']

"=====Vim-Plug====="
